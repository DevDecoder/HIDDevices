<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root"
              xmlns="">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral,
      PublicKeyToken=b77a5c561934e089
    </value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral,
      PublicKeyToken=b77a5c561934e089
    </value>
  </resheader>
  <data name="DefaultControllerName" xml:space="preserve">
    <value>Vendor: {0}; Product ID: {1}; Release: {2}</value>
  </data>
  <data name="DeviceAdd" xml:space="preserve">
    <value>The {0} device was found.</value>
  </data>
  <data name="DeviceAddDescription" xml:space="preserve">
    <value>Event logged when a new Device is found and successfully added.</value>
  </data>
  <data name="DeviceConnected" xml:space="preserve">
    <value>Connected to {0} Device.</value>
  </data>
  <data name="DeviceConnectedDescription" xml:space="preserve">
    <value>Event logged when a connection is established with a device.</value>
  </data>
  <data name="DeviceConnectionClosed" xml:space="preserve">
    <value>The connection to the {0} was closed.</value>
  </data>
  <data name="DeviceConnectionClosedDescription" xml:space="preserve">
    <value>Event logged when a connection is closed to a device.</value>
  </data>
  <data name="DeviceConnectionFailed" xml:space="preserve">
    <value>Failed to open a connection to the {0} Device.</value>
  </data>
  <data name="DeviceConnectionFailedDescription" xml:space="preserve">
    <value>Event logged when an attempt to open a connection to a Device fails.</value>
  </data>
  <data name="DeviceCreationFailure" xml:space="preserve">
    <value>Could not create the {0} device!</value>
  </data>
  <data name="DeviceCreationFailureDescription" xml:space="preserve">
    <value>Event logged when an exception is thrown whilst trying to create a Device class, usually this is an access violation.</value>
  </data>
  <data name="DeviceError" xml:space="preserve">
    <value>An error occurred whilst listening to the {0} device.</value>
  </data>
  <data name="DeviceErrorDescription" xml:space="preserve">
    <value>Event logged when an error occurs whilst listening to a device.</value>
  </data>
  <data name="DeviceRemove" xml:space="preserve">
    <value>The {0} device was removed.</value>
  </data>
  <data name="DeviceRemoveDescription" xml:space="preserve">
    <value>Event logged when a Device is unplugged.</value>
  </data>
  <data name="DeviceUpdate" xml:space="preserve">
    <value>The {0} device was updated.</value>
  </data>
  <data name="DeviceUpdateDescription" xml:space="preserve">
    <value>Event logged when a Device's definition is changed.</value>
  </data>
  <data name="RefreshFailure" xml:space="preserve">
    <value>The HID devices failed to update!</value>
  </data>
  <data name="RefreshFailureDescription" xml:space="preserve">
    <value>Event logged when an exception is thrown whilst trying to load the Devices collection on a change being detected to the list of HID Devices.</value>
  </data>
  <data name="ControllerInvalidPropertyType" xml:space="preserve">
    <value>The {0} is expecting a value of type '{1}' but has a value of type '{2}'.</value>
  </data>
  <data name="ControllerMissingConverter" xml:space="preserve">
    <value>The {0} is expecting a value of type '{1}' but there is no default converter registered for that type, nor explicit converter supplied.</value>
  </data>
  <data name="ControllerInvalidConverter" xml:space="preserve">
    <value>The supplied converter must implement IControlConverter&lt;&gt;</value>
  </data>
  <data name="ControllerInvalidType" xml:space="preserve">
    <value>The '{0}' device type must be assignable to the '{1}' type.</value>
  </data>
  <data name="ControllerInvalidConstructor" xml:space="preserve">
    <value>The '{0}' type does not contain a constructor with the correct parameter types.</value>
  </data>
</root>